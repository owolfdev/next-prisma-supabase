import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import React, { useState, useRef, useEffect } from "react";

import { makeSerializable } from "../lib/utils";

import { PrismaClient, User } from "@prisma/client";
const prisma = new PrismaClient();

interface Props {
  users: User[];
}

const Home: React.FC<Props> = (props) => {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [id, setId] = useState("");
  const [users, setUsers] = useState<User[]>([]);
  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);

  useEffect(() => {
    console.log(selectedUsers);
  }, [selectedUsers]);

  useEffect(() => {
    console.log(props.users);
  }, [props.users]);

  useEffect(() => {
    setUsers(props.users);
  }, []);

  const nameInputRef = useRef<HTMLInputElement>(null);
  const emailInputRef = useRef<HTMLInputElement>(null);
  const idInputRef = useRef<HTMLInputElement>(null);

  const handleGetUsers = () => {
    fetch("api/read")
      .then((res) => res.json())
      .then((res) => {
        console.log("got these users: ", res);
      });
  };

  const handleGetUsersDb = () => {
    fetch("api/read-db")
      .then((res) => res.json())
      .then((res) => {
        console.log("got these users: ", res);
        setUsers(res);
      });
  };

  const handleCreateUser = () => {
    console.log(
      "create a user with the name of:",
      name,
      "and email of:",
      email
    );

    const data = {
      name: name,
      email: email,
    };

    fetch("api/create", {
      method: "POST",
      body: JSON.stringify(data),
    })
      .then((res) => res.json())
      .then((res) => {
        console.log("this user created: ", res);
        const usersArray = [...users, res];
        setUsers(usersArray);
      });
  };

  const handleDeleteUser = () => {
    console.log("delete user with id of:", id);
    const data = {
      id: id,
    };
    fetch("api/delete", {
      method: "DELETE",
      body: JSON.stringify(data),
    })
      .then((res) => res.json())
      .then((res) => {
        console.log("deleted this user: ", res);
      });
  };

  const handleDeleteUsers = () => {
    console.log("delete users with ids of:", selectedUsers);
    const data = {
      selectedUsers: selectedUsers,
    };
    fetch("api/delete-many", {
      method: "DELETE",
      body: JSON.stringify(data),
    })
      .then((res) => res.json())
      .then((res) => {
        console.log("deleted this user: ", res);
        handleGetUsersDb();
      });
  };

  const handleInput = () => {
    const nameInput: string = nameInputRef.current?.value!;
    setName(nameInput);

    const emailInput: string = emailInputRef.current?.value!;
    setEmail(emailInput);

    const idInput: string = idInputRef.current?.value!;
    setId(idInput);
  };

  const handleCheck = (e: React.ChangeEvent<HTMLInputElement>) => {
    console.log(e.target.id);
    if (e.target.checked) {
      console.log("checked");
      const checkedItems = [...selectedUsers, e.target.id];
      setSelectedUsers(checkedItems);
    } else {
      console.log("not checked");
      const checkedItems = selectedUsers.filter((userId) => {
        return userId !== e.target.id;
      });
      setSelectedUsers(checkedItems);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className="input-container">
          Name: <input ref={nameInputRef} onChange={handleInput} />
        </div>
        <div className="input-container">
          Email: <input ref={emailInputRef} onChange={handleInput} />
        </div>
        <div className="input-container">
          Id: <input ref={idInputRef} onChange={handleInput} />
        </div>
        <button onClick={handleGetUsers}>Get Users</button>{" "}
        <button onClick={handleGetUsersDb}>Get Users From Database</button>{" "}
        <button onClick={handleCreateUser}>Create User</button>{" "}
        <button onClick={handleDeleteUser}>Delete User</button>{" "}
        <div className="checkList">
          <div className="title">Your CheckList:</div>
          <div className="list-container">
            {users.map((user, index) => (
              <div key={index}>
                <input
                  value={user.name?.toString()}
                  type="checkbox"
                  onChange={handleCheck}
                  id={user.id?.toString()}
                />
                <span>{user.name?.toString()}</span>
              </div>
            ))}
          </div>
        </div>
        <button onClick={handleDeleteUsers}>Delete Selected Users</button>{" "}
      </main>
    </div>
  );
};

export default Home;

export async function getStaticProps() {
  const res = await prisma.user.findMany();
  const users: User[] = res;
  console.log(users);

  return {
    props: { users: makeSerializable(users) },
  };
}
